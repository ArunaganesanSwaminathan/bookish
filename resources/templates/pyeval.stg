delimiters "<",">"

pyfile(snippets, buildDir, outputDir, basename, label) ::= <<
import io
import sys
from contextlib import redirect_stdout, redirect_stderr

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score

def dump(o):
	"""Given df, col, ndarray, value return csv formatted data"""
	# write to <buildDir>
	return repr(o)

<snippets; separator="\n">
>>

pyfig(def) ::= <<
# <def.inputFilename> snippet <def.index>
fstderr = io.StringIO()
with redirect_stderr(fstderr):
	try:
		<def.code>
		plt.savefig("<outputDir>/images/<basename>/<basename>_<label>_<def.index>.svg", format="svg", pad_inches=0.0)
	except:
		import traceback
		traceback.print_exc(file=sys.stderr)
	finally:
		with open("<buildDir>/snippets/<basename>/<basename>_<label>_<def.index>.err", "w") as f:
			f.write(fstderr.getvalue())
<\n>
>>

pyeval(def) ::= <<
# <def.inputFilename> snippet <def.index>
fstdout = io.StringIO()
fstderr = io.StringIO()
with redirect_stderr(fstderr):
	with redirect_stdout(fstdout):
		try:
			<def.code>
			with open("<buildDir>/snippets/<basename>/<basename>_<label>_<def.index>.out", "w") as f:
				f.write(fstdout.getvalue())
			<if(def.displayExpr)>
			with open("<buildDir>/snippets/<basename>/<basename>_<label>_<def.index>.csv", "w") as f:
				f.write(dump(<def.displayExpr>))
			<endif>
		except:
			import traceback
			traceback.print_exc(file=sys.stderr)
		finally:
			with open("<buildDir>/snippets/<basename>/<basename>_<label>_<def.index>.err", "w") as f:
				f.write(fstderr.getvalue())
>>
