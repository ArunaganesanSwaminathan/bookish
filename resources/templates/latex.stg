delimiters "<",">"


header(author) ::= <<
\documentclass[11pt]{article}
\usepackage{hyperref}
\usepackage{graphicx}
\usepackage{amssymb}
\usepackage[fleqn]{amsmath}
\usepackage{epstopdf}
\usepackage{mdframed}
\DeclareGraphicsRule{.tif}{png}{.png}{`convert #1 `dirname #1`/`basename #1 .tif`.png}

\textwidth = 6.5 in
\textheight = 9 in
\oddsidemargin = 0.0 in
\evensidemargin = 0.0 in
\topmargin = 0.0 in
\headheight = 0.0 in
\headsep = 0.0 in
\parskip = 0.2in
\parindent = 0.0in

\newtheorem{theorem}{Theorem}
\newtheorem{corollary}[theorem]{Corollary}
\newtheorem{definition}{Definition}

\mdfdefinestyle{asidestyle}{%
  topline=true,
  bottomline=true,
  rightline=true,
  innertopmargin=5pt,
  innerleftmargin=3pt,
  innerrightmargin=0pt,
  innerbottommargin=5pt,
  skipabove=2pt,
  skipbelow=2pt,
}

\newenvironment{aside}[1]
{
    \begin{mdframed}[style=exampledefault, frametitle={#1}]
}
{
    \end{mdframed}
}

\newcommand{\cut}[1]{}

\renewcommand\vec{\mathbf}

\allowdisplaybreaks

\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    urlcolor=blue
}

\urlstyle{same}
\title{<model.title>}
\author{<author>}
\begin{document}
\maketitle

>>

footer() ::= <<
<\n>
\end{document}
>>

Book(model) ::= <<
<header(model.author)>
\tableofcontents

\title{<model.title>}

\author{<model.author>}

<footer()>
>>


Document(model, chapter) ::= <<
<header(chapter.author)>
<chapter>
<footer()>
>>

Chapter(model, author, preabstract, abstract_, elements, subcontainers) ::= <<

<preabstract>

<abstract_>

\pagebreak
{\small \setlength{\parskip}{0pt} \tableofcontents}
\pagebreak

<elements>

<subcontainers>

>>

Author(model, author) ::= "<author>"

PreAbstract(model, elements) ::= "<elements>"

Abstract(model, elements) ::= <<
\begin{abstract}
<elements>
\end{abstract}
>>

Section(model, elements, subcontainers) ::= <<
\section{<model.title>}\label{<model.anchor>}

<elements>

<subcontainers>
>>

SubSection(model, elements, subcontainers) ::= <<
\subsection{<model.title>}\label{<model.anchor>}

<elements>

<subcontainers>
>>

SubSubSection(model, elements, subcontainers) ::= <<
\subsubsection{<model.title>}\label{<model.anchor>}

<elements>

<subcontainers>
>>

TextBlock(model,elements) ::= "<elements>"

SideQuote(model,quote,author) ::= "\\mysidenote{``<quote>'' --- <author>}"

SideNote(model,text) ::= "\\mysidenote{$text$}"

Citation(model,title,bibinfo) ::= "\\mysidenote{``<title>'' --- <bibinfo>}"

ChapQuote(model,quote,author) ::= "``<quote>'' --- <author>"

dumpCode(code) ::= <<
<\n>
\begin{pcode}
<code>
\end{pcode}
<\n>
>>

BlockCode(model) ::= <<
<dumpCode(model.code)>
>>

PyEval(model) ::= <<
<if(model.codeDef.isCodeVisible)>
<dumpCode(model.codeDef.code)>
<endif>
<if(model.stdout)>\begin{mdframed}
{\footnotesize
\begin{alltt}
<model.stdout>\end{alltt}}
\end{mdframed}
<endif>
<if(model.stderr)>\begin{mdframed}
{\footnotesize
\begin{alltt}
<model.stderr>\end{alltt}}
\end{mdframed}
<endif>
>>

InlinePyEval(model) ::= <<
<if(model.stderr)><model.stderr; format="xml-encode"><else><model.displayData><endif>
>>

PyEvalDataFrame(model) ::= <<
<if(model.codeDef.isCodeVisible)>
<dumpCode({<model.codeDef.code><if(model.codeDef.displayExpr)><\n><model.codeDef.displayExpr><endif>})>
<endif>
<if(model.stdout)>\begin{mdframed}
{\footnotesize
\begin{alltt}
<model.stdout>\end{alltt}}
\end{mdframed}
<endif>
<if(model.stderr)>\begin{mdframed}
{\footnotesize
\begin{alltt}
<model.stderr>\end{alltt}}
\end{mdframed}
<endif>
<dataTable(model.dataTable)>
<\n>
>>

dataTable(dt) ::= <<
\vspace{5pt}
{\footnotesize
\begin{tabular}{<dt.colNames:{c | r}>}
<dt.colNames:{c | {\bf <c; format="escape">\}}; separator=" & ">\\\\
<dt.rows:{r | <dataTableRow(dt,r)>\\\\}; separator="\n">
\end{tabular}
}
\vspace{5pt}
>>

dataTableRow(dt,r) ::= <<
<if(dt.firstColIsIndex)>
{\bf <first(r); format="escape">}<rest(r):{c| & <c; format="escape">}>
<else>
<rest(r):{c| <c; format="escape">}; separator=" & ">
<endif>
>>

PyFig(model) ::= <<
<if(model.codeDef.isCodeVisible)>
<dumpCode(model.codeDef.code)>
<endif>
<if(model.args.side)>
\mysidenote{{\it Generated by code in body}\\\\
\includegraphics[<if(model.args.width)>width=<model.args.width>\linewidth<endif>]{<model.codeDef.generatedFilenameNoSuffix>.pdf}
}
<else>
\includegraphics[<if(model.args.width)>width=<model.args.width>\linewidth<endif>]{<model.codeDef.generatedFilenameNoSuffix>.pdf}
<endif>
<if(model.stderr)>\begin{mdframed}
{\footnotesize
\begin{alltt}
<model.stderr>\end{alltt}}
<endif>
>>

Site(model) ::= "\\footnote{<model.def.website>}"

SideFigure(model, code, caption) ::= <<
\begin{marginfigure}
\centering
<code>
\vspace{-2mm}
\caption{\footnotesize <caption>}
\label{fig:pyth}
\end{marginfigure}
>>

SiteRef(model) ::= "<model.def.template>"
CitationRef(model) ::= "<model.def.template>"
FigureRef(model) ::= "Figure <model.def.index>{\em <model.def.template>}"
SideNoteRef(model) ::= "<model.def.template>"
SideQuoteRef(model) ::= "<model.def.template>"
SectionRef(model) ::= "Section <model.def.containerNumber> {\em <model.def.model.title>}"
ChapterRef(model) ::= "Chapter <model.def.containerNumber> {\em <model.def.model.title>}"
UnknownRef(model) ::= "\textcolor{red}{[<model.def.label>]}"

OrderedList(model, items) ::= <<
\begin{enumerate}
<items>
\end{enumerate}
>>

UnOrderedList(model, items) ::= <<
\begin{itemize}
<items>
\end{itemize}
>>

ListItem(model, elements) ::= "\item <elements>"

Table(model, headers, rows) ::= <<

\begin{tabular}{<headers.items:{th | <if(th.model.widthPercentage)>p{0.<th.model.widthPercentage>\linewidth\}<else>l<endif>}>}
<headers>
<rows>
\end{tabular}

>>

TableRow(model, items) ::= <<
<items; separator="&">\\\\<\n>
>>

TableItem(model, contents) ::= "<contents>"

TableHeaderItem(model, contents) ::= "{\bf <contents>}"

Paragraph(model, elements) ::= "<\n><elements><\n>"

InlineImage(model) ::= <<
\includegraphics{<model.src>}
>>

Image(model) ::= <<
\begin{center}
\includegraphics[width=<model.attrs.width>\linewidth]{<model.attrs.src>}
\end{center}
>>

BlockImage(model) ::= <<

\begin{center}
\includegraphics[width=<model.attrs.width>\linewidth]{<model.attrs.src>}
\end{center}

>>

XMLTag(model) ::= <<
>>

XMLEndTag(model) ::= ""

Latex(model) ::= <<
\begin{center}
<model.text>
\end{center}
>>

BlockEquation(model) ::= <<
\[<model.eqn>\]
>>

InlineEquation(model) ::= "$<model.eqn>$"

EqnVar(model) ::= "$<model.varname>$"

EqnIndexedVar(model) ::= "$<model.varname>_<model.indexname>$"

EqnVecVar(model) ::= "$\mathbf{<model.varname>}$"

EqnIndexedVecVar(model) ::= "$\mathbf{<model.varname>}_<model.indexname>$"

HyperLink(model) ::= <<
\href{<model.href; format="escape">}{<model.title; format="url-escape">}
>>

Quoted(model, elements) ::= "``<elements>''"

Callout(model, text) ::= "\begin{callout}{<text>}\end{callout}"

Aside(model, text) ::= "\begin{aside}{<model.attrs.title>}<text>\end{aside}"

InlineCode(model) ::= <<{\tt\small <model.code; format="escape">}>>

Bold(model) ::= "{\bf <model.text>}"
Italics(model) ::= "{\em <model.text>}"

TODO(model) ::= "\textcolor{red}{{TODO: <model.text>\}}"

Other(model) ::= <<
<model.text; format="escape">
>>

Join(model, elements) ::= "<elements>"